#include "test.h"

void printInt(const std::vector<uint8_t>& hash) {
    for (size_t i = 0; i < hash.size(); ++i) {
        int8_t signedByte = static_cast<int8_t>(hash[i]);
        std::cout << static_cast<int>(signedByte);
        if (i != hash.size() - 1) {
            std::cout << ", ";
        }
    }
    std::cout << std::endl;
}

void printHeader(const Header& header) {
    std::cout << "Version: " << static_cast<int>(header.version) << std::endl;

    std::cout << "Parent ID: ";
    printInt(header.parentId);

    std::cout << "ADProofsRoot: ";
    for (const auto& byte : header.ADProofsRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "StateRoot: ";
    for (const auto& byte : header.stateRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "TransactionsRoot: ";
    for (const auto& byte : header.transactionsRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "Timestamp: " << header.timestamp << std::endl;
    std::cout << "nBits: " << header.nBits << std::endl;
    std::cout << "Height: " << header.height << std::endl;

    std::cout << "ExtensionRoot: ";
    for (const auto& byte : header.extensionRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "Solution pk: ";
    for (const auto& byte : groupElemToBytes(header.powSolution.pk)) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "Solution w: ";
    for (const auto& byte : groupElemToBytes(header.powSolution.w)) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "Solution nonce: ";
    for (const auto& byte : header.powSolution.n) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "Solution d: " << header.powSolution.d << std::endl;
}

//Create a Header for prove test 
Header createHeader() {
    //We can pass the different Header for testing 
    Version version = 1;
    ModifierId parentId = { 0x01, 0x07, 0x0F, 0x08, 0x04, 0x05, 0x04, 0x09, 0x02, 0x01, 0x09, 0x0C, 0x0D, 0x08, 0x08, 0x0F, 0x0D, 0x03, 0x09, 0x03, 0x0D, 0x0B, 0x09, 0x0C, 0x0F, 0x00, 0x01, 0x06, 0x04, 0x06, 0x01, 0x0F, 0x04, 0x02, 0x00, 0x01, 0x07, 0x0E, 0x0B, 0x06, 0x06, 0x0B, 0x02, 0x0E, 0x0B, 0x0E, 0x0B, 0x09, 0x08, 0x0C, 0x06, 0x0E, 0x0B, 0x07, 0x09, 0x0E, 0x0F, 0x0E, 0x01, 0x06, 0x01, 0x07, 0x0C, 0x00 };
    
    Digest32 ADProofsRoot = { 0xCB, 0xBB, 0xF5, 0xE6, 0xB1, 0x3E, 0xA2, 0x97, 0xB8, 0x7A, 0xCC, 0xDE, 0x6F, 0x97, 0x2D, 0x1A, 0xF1, 0x43, 0x2D, 0xF9, 0x4D, 0x2A, 0xF0, 0x53, 0x67, 0xE9, 0xD9, 0xD6, 0x31, 0x76, 0xE3, 0xBE };

    ADDigest stateRoot = { 0x98, 0x6E, 0x27, 0xC6, 0x49, 0x15, 0x5B, 0xBA, 0x48, 0xF4, 0xC6, 0x0D, 0x19, 0x8F, 0x44, 0x80, 0xB1, 0xDC, 0xA0, 0x83, 0xDF, 0x37, 0xFF, 0x65, 0x31, 0xFE, 0x07, 0xA3, 0x46, 0x42, 0x65, 0xDB, 0x04 };

    Digest32 transactionsRoot = { 0x3E, 0x83, 0x37, 0xB3, 0x4D, 0x35, 0x4E, 0x20, 0x3F, 0x47, 0xCB, 0x82, 0x84, 0x89, 0x6B, 0x7D, 0x1A, 0x6A, 0x62, 0xB9, 0xE1, 0x21, 0x64, 0x6C, 0xCE, 0xC7, 0x7D, 0x71, 0x55, 0xA8, 0xE1, 0x24 };
    
    uint64_t timestamp = 1720155626452;
    uint32_t nBits = 16842752;
    int height = 4;
    Digest32 extensionRoot = { 0x20, 0x2E, 0xC5, 0x19, 0xF9, 0x15, 0x93, 0x28, 0x4D, 0x56, 0xDD, 0x23, 0x69, 0x4A, 0xF3, 0x6D, 0x8C, 0xC7, 0x49, 0x36, 0x79, 0x88, 0x81, 0x34, 0x5D, 0xE1, 0x72, 0xE6, 0xB4, 0x5C, 0x2F, 0x3D };

    AutolykosSolution powSolution = {
      groupElemFromBytes({ 0x03, 0x8B, 0x0F, 0x29, 0xA6, 0x0F, 0xA8, 0xD7, 0xE1, 0xAE, 0xAF, 0xBE, 0x51, 0x22, 0x88, 0xA6, 0xC6, 0xBC, 0x69, 0x65, 0x47, 0xBB, 0xF8, 0x24, 0x7D, 0xB2, 0x3C, 0x95, 0xE8, 0x30, 0x14, 0x51, 0x3C }),
      groupElemFromBytes({ 0x03, 0x8B, 0x03, 0xFC, 0xDE, 0xC5, 0xBA, 0xAF, 0x9F, 0xD2, 0x87, 0xAB, 0x77, 0x30, 0x37, 0xED, 0xF7, 0x25, 0x37, 0x8B, 0xD4, 0x68, 0x95, 0x4C, 0x35, 0xB9, 0x6E, 0xE6, 0x2B, 0x98, 0x3A, 0x64, 0x8A }),
      { 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      boost::multiprecision::cpp_int("98580583021618449200403132449708896974523535196699518463983559318187734512464")
    };
    std::array<uint8_t, 3> votes = {0x00, 0x00, 0x00};

    return Header(version, parentId, ADProofsRoot, stateRoot, transactionsRoot, timestamp, nBits, height, extensionRoot, powSolution, votes);
}

int main() {
    int k = 32;
    int n = 26; // Example values, adjust as needed
                
    // Create an instance of AutolykosPowScheme
    AutolykosPowScheme powScheme(k, n);

    Version version = 1;
    uint32_t nBits = 16842752;

    ADDigest stateRoot = { 0xC2, 0x7C, 0x63, 0x57, 0x04, 0x7F, 0x28, 0x59, 0x6B, 0x35, 0x90, 0x1E, 0xEA, 0xD7, 0x06, 0x28, 0x06, 0xE8, 0x57, 0x43, 0xDF, 0xF1, 0xB6, 0xB0, 0x81, 0x1A, 0x10, 0xDA, 0xF1, 0xF7, 0x68, 0xFB, 0x04 };

    Digest32 adProofsRoot = { 0x53, 0xEB, 0x1C, 0xCB, 0x94, 0xBE, 0xD7, 0xB8, 0xE6, 0xDC, 0x39, 0xFF, 0x22, 0x39, 0xC4, 0x38, 0x7F, 0xD5, 0x75, 0xC5, 0x44, 0xE3, 0xAB, 0x40, 0x8B, 0x88, 0xCB, 0x8C, 0x00, 0x0F, 0x04, 0x1F };

    Digest32 transactionsRoot = { 0x6B, 0x8F, 0x90, 0xBF, 0x1C, 0x79, 0x69, 0xD6, 0x78, 0xED, 0xE6, 0x98, 0xBD, 0x84, 0x06, 0x94, 0x3C, 0xAC, 0x8A, 0x60, 0x32, 0x28, 0x79, 0x23, 0x86, 0x9C, 0x2A, 0xDE, 0x2E, 0x4D, 0xF4, 0x6F };

    uint64_t timestamp = 1720155746452;

    Digest32 extensionHash = { 0x20, 0x2E, 0xC5, 0x19, 0xF9, 0x15, 0x93, 0x28, 0x4D, 0x56, 0xDD, 0x23, 0x69, 0x4A, 0xF3, 0x6D, 0x8C, 0xC7, 0x49, 0x36, 0x79, 0x88, 0x81, 0x34, 0x5D, 0xE1, 0x72, 0xE6, 0xB4, 0x5C, 0x2F, 0x3D };

    std::array<uint8_t, 3> votes = {0x00, 0x00, 0x00};
    boost::multiprecision::cpp_int sk("24553816203091137057580550062664121360927647230968026115906299297794645072730");
    long minNonce = LLONG_MIN;
    long maxNonce = LLONG_MAX;

    Header header = createHeader();
    printHeader(header);

    std::cout << std::endl;
    std::cout << "2nd version: " << static_cast<int>(version) << std::endl;
    std::cout << "2nd nBits: " << nBits << std::endl;

    std::cout << "2nd StateRoot: ";
    for (const auto& byte : stateRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "2nd adProofsRoot: ";
    for (const auto& byte : adProofsRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;


    std::cout << "2nd transactionsRoot: ";
    for (const auto& byte : transactionsRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "2nd timestamp: " << timestamp << std::endl;

    std::cout << "2nd extensionHash: ";
    for (const auto& byte : extensionHash) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::optional<Header> out_header_opt = powScheme.prove(header, version, nBits, stateRoot, adProofsRoot, transactionsRoot, timestamp, extensionHash, votes, sk, minNonce, maxNonce);
    if (out_header_opt) {
        Header out_header = *out_header_opt;
        std::cout << std::endl;
        std::cout << "Output Header" << std::endl;
        printHeader(out_header);
    } else {
        std::cerr << "Failed to generate proof" << std::endl;
    }

    return 0;
}
