#include "test.h"

//Creating an invalid Header
Header createHeader() {
    Version version = 2;
    ModifierId parentId = {0x0A, 0x0B, 0x01, 0x09, 0x0E, 0x06, 0x0C, 0x07, 0x0A, 0x04, 0x00, 0x06, 0x02, 0x09, 0x07, 0x09,
                           0x0D, 0x0D, 0x0D, 0x0B, 0x05, 0x03, 0x04, 0x0D, 0x0F, 0x08, 0x03, 0x0F, 0x02, 0x03, 0x06, 0x0D,
                           0x01, 0x0B, 0x09, 0x04, 0x09, 0x0C, 0x07, 0x0C, 0x0E, 0x0F, 0x01, 0x08, 0x0B, 0x0C, 0x0F, 0x04,
                           0x03, 0x04, 0x0A, 0x06, 0x07, 0x0E, 0x08, 0x07, 0x0C, 0x05, 0x09, 0x03, 0x0E, 0x0E, 0x0F, 0x09};
    Digest32 ADProofsRoot = {0x49, 0x45, 0x38, 0x75, 0xA4, 0x30, 0x35, 0xC7, 0x64, 0x0D, 0xEE, 0x2F, 0x90, 0x5E, 0xFE, 0x06,
                             0x12, 0x8B, 0x00, 0xD4, 0x1A, 0xCD, 0x2C, 0x8D, 0xF1, 0x36, 0x91, 0x57, 0x6D, 0x4F, 0xD8, 0x5C};
    ADDigest stateRoot = {0xc0, 0xd0, 0xb5, 0xea, 0xfd, 0x07, 0xb2, 0x24, 0x87, 0xda, 0xc6, 0x66, 0x28, 0x66, 0x9c, 0x42, 
                          0xa2, 0x42, 0xb9, 0x0b, 0xef, 0x3e, 0x1f, 0xcd, 0xc7, 0x6d, 0x83, 0x14, 0x0d, 0x58, 0xb6, 0xbc, 
                          0x0e};
    Digest32 transactionsRoot = {0x77, 0x0c, 0xbb, 0x6e, 0x18, 0x67, 0x3e, 0xd0, 0x25, 0xd3, 0x86, 0x48, 0x7f, 0x15, 0xd3, 0x25, 
                                 0x21, 0x15, 0xd9, 0xa6, 0xf6, 0xc9, 0xb9, 0x47, 0xcf, 0x3d, 0x04, 0x73, 0x1d, 0xd6, 0xab, 0x75};
    uint64_t timestamp = 1611225263165;
    uint32_t nBits = 72286528 ;
    int height = 2870;
    Digest32 extensionRoot = {0x9b, 0xc7, 0xd5, 0x45, 0x83, 0xc5, 0xd4, 0x4b, 0xb6, 0x2a, 0x7b, 0xe0, 0x47, 0x3c, 0xd7, 0x8d, 
                              0x60, 0x18, 0x22, 0xa6, 0x26, 0xaf, 0xc1, 0x3b, 0x63, 0x6f, 0x2c, 0xbf, 0xf0, 0xd8, 0x7f, 0xaf};
    AutolykosSolution powSolution = {
      groupElemFromBytes({0x02, 0x88, 0x11, 0x4b, 0x05, 0x86, 0xef, 0xea, 0x9f, 0x86, 0xe4, 0x58, 0x7f, 0x20, 0x71, 0xbc,
                          0x1c, 0x85, 0xfb, 0x77, 0xe1, 0x5e, 0xba, 0x96, 0xb2, 0x76, 0x97, 0x33, 0xe0, 0xda, 0xf5, 0x79, 0x03}),
      groupElemFromBytes({0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b,
                          0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98}),
      {0x00, 0x01, 0x00, 0x00, 0x05, 0x80, 0xa9, 0x1b},
      boost::multiprecision::cpp_int("0")
    };
    std::array<uint8_t, 3> votes = {0x00, 0x00, 0x00};

    return Header(version, parentId, ADProofsRoot, stateRoot, transactionsRoot, timestamp, nBits, height, extensionRoot, powSolution, votes);
}

int main() {
    int k = 32;
    int n = 26; // Example values, adjust as needed
                
    // Create an instance of AutolykosPowScheme
    AutolykosPowScheme powScheme(k, n);

    //test vector - invalid solution
    std::cout << "test_InvalidSolution" << std::endl;
    powScheme.validate(createHeader()); 

    return 0;
}


