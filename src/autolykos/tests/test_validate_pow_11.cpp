#include "test.h"

//Create a Header for Test_1 
Header createHeader() {
    //We can pass the different Header for testing 
    Version version = 0x02;

    ModifierId parentId = {
        0x2, 0x3, 0x2, 0x6, 0xa, 0x4, 0x5, 0xd, 0x8, 0x2, 0x6, 0xd, 0xc, 0xa, 0x0, 0xa, 0xc, 0x6, 0x3, 0x4, 0xa, 0xc, 0x6, 0xd, 0xd, 0x7, 0x5, 0x4, 0xf, 0x8, 0xc, 0xf, 
        0x3, 0xc, 0x5, 0xd, 0x3, 0x5, 0xf, 0x6, 0x3, 0x6, 0x5, 0xc, 0x0, 0xf, 0x5, 0xf, 0xd, 0xf, 0xf, 0x4, 0x3, 0xc, 0x7, 0x3, 0x1, 0x7, 0xc, 0xa, 0x6, 0x4, 0xc, 0x8};
    
    Digest32 ADProofsRoot = {0x09, 0xad, 0x65, 0xab, 0xdd, 0x29, 0xe1, 0x4f, 0x4e, 0x73, 0x98, 0x5e, 0xb1, 0x5e, 0xd7, 0x6e, 
                             0x08, 0x3f, 0x81, 0x67, 0x48, 0x1f, 0xf8, 0x99, 0x38, 0xee, 0xa4, 0xa5, 0xdc, 0x23, 0x98, 0x65};
    
    ADDigest stateRoot = {0xb8, 0x25, 0xbc, 0xd8, 0x06, 0xcc, 0xda, 0x6e, 0x68, 0x54, 0xbe, 0xfd, 0x6b, 0x4f, 0x4d, 0x78, 
                          0x62, 0xc6, 0xea, 0xe1, 0xc3, 0xa5, 0xa1, 0x22, 0xe9, 0x59, 0x42, 0xfd, 0x9b, 0x6b, 0x5d, 0xce, 0x18};
    
    Digest32 transactionsRoot = {0x29, 0xda, 0xb4, 0xc7, 0x39, 0xb2, 0x6a, 0x4b, 0x6a, 0x05, 0xe7, 0x7a, 0xb0, 0x55, 0xd9, 0x19, 
                                 0x3f, 0xb3, 0xcc, 0x2e, 0x6e, 0x04, 0x92, 0xb8, 0xe8, 0xb2, 0xa4, 0x9c, 0x89, 0x31, 0x22, 0x0c};
    
    uint64_t timestamp = 1650348443443;
    uint32_t nBits = 117882427;
    int height = 731368;
    
    Digest32 extensionRoot = {0x88, 0xb9, 0x24, 0x38, 0xe4, 0x5f, 0xac, 0x3c, 0x03, 0x85, 0xb6, 0x07, 0x40, 0x08, 0xa3, 0x86, 
                              0x8d, 0x25, 0xf8, 0x6e, 0x4a, 0x45, 0x2e, 0xe5, 0x97, 0xa2, 0x4a, 0xd4, 0xd2, 0xcf, 0x7b, 0xe6};

    AutolykosSolution powSolution = {
        groupElemFromBytes({0x02, 0xee, 0xec, 0x37, 0x4f, 0x4e, 0x66, 0x0e, 0x11, 0x7f, 0xcc, 0xbf, 0xec, 0x79, 0xe6, 0xfe, 
                            0x5c, 0xdf, 0x44, 0xac, 0x50, 0x8f, 0xa2, 0x28, 0xbf, 0xc6, 0x54, 0xd2, 0x97, 0x3f, 0x9b, 0xdc, 0x9a}),
        groupElemFromBytes({0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 
                            0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98}),
        {0x7d, 0x81, 0x00, 0x00, 0xa8, 0x72, 0x14, 0x1a},
        boost::multiprecision::cpp_int("0")
    };
    
    std::array<uint8_t, 3> votes = {0x00, 0x00, 0x00};

    return Header(version, parentId, ADProofsRoot, stateRoot, transactionsRoot, timestamp, nBits, height, extensionRoot, powSolution, votes);
}

void printInt(const std::vector<uint8_t>& hash) {
    for (size_t i = 0; i < hash.size(); ++i) {
        int8_t signedByte = static_cast<int8_t>(hash[i]);
        std::cout << static_cast<int>(signedByte);
        if (i != hash.size() - 1) {
            std::cout << ", ";
        }
    }
    std::cout << std::endl;
}

void printHex(const std::vector<uint8_t>& hash, int num_digits) {
    for (size_t i = 0; i < hash.size(); ++i) {
        int8_t signedByte = static_cast<int8_t>(hash[i]);
        // Convert the signed byte to an unsigned byte for correct hex representation
        uint8_t byte = static_cast<uint8_t>(signedByte);
        std::cout << std::hex << std::setw(num_digits) << std::setfill('0') << static_cast<int>(byte);
    }
    std::cout << std::endl;
}

void printHeader(const Header& header) {
    std::cout << "Version: " << static_cast<int>(header.version) << std::endl;

    std::cout << "Parent ID: ";
    printInt(header.parentId);

    std::cout << "ADProofsRoot: ";
    for (const auto& byte : header.ADProofsRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "StateRoot: ";
    for (const auto& byte : header.stateRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "TransactionsRoot: ";
    for (const auto& byte : header.transactionsRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;

    std::cout << "Timestamp: " << header.timestamp << std::endl;
    std::cout << "nBits: " << header.nBits << std::endl;
    std::cout << "Height: " << header.height << std::endl;

    std::cout << "ExtensionRoot: ";
    for (const auto& byte : header.extensionRoot) {
        std::cout << static_cast<int>(static_cast<int8_t>(byte)) << " ";
    }
    std::cout << std::endl;
}

//generated solution should be valid
void test(AutolykosPowScheme& pow, const Header& inHeader) {
    ErgoNodeViewModifier HeaderToBytes;
    auto Id = HeaderToBytes.id(inHeader);
    auto hash_Header = HeaderToBytes.serializedId(inHeader);

    std::cout << "Header: ";
    printHeader(inHeader); 

    std::cout << "Header Id (Option1): ";
    printHex(Id, 1);

    std::cout << "Header Id (Option2): ";
    printHex(hash_Header, 2);

    pow.validate(inHeader);
}

int main() {
    int k = 32;
    int n = 26; // Example values, adjust as needed
                
    // Create an instance of AutolykosPowScheme
    AutolykosPowScheme powScheme(k, n);
    test(powScheme, createHeader());

    return 0;
}
