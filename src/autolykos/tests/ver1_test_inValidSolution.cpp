#include "test.h"

//Create a Header for Invalid Test 
Header createHeader() {
    //We can pass the different Header for testing 
    Version version = 1;
    ModifierId parentId = { 0x0A, 0x0B, 0x01, 0x09, 0x0E, 0x06, 0x0C, 0x07, 0x0A, 0x04, 0x00, 0x06, 0x02, 0x09, 0x07, 0x09, 0x0D, 0x0D, 0x0D, 0x0B, 0x05, 0x03, 0x04, 0x0D, 0x0F, 0x08, 0x03, 0x0F, 0x02, 0x03, 0x06, 0x0D, 0x01, 0x0B, 0x09, 0x04, 0x09, 0x0C, 0x07, 0x0C, 0x0E, 0x0F, 0x01, 0x08, 0x0B, 0x0C, 0x0F, 0x04, 0x03, 0x04, 0x0A, 0x06, 0x07, 0x0E, 0x08, 0x07, 0x0C, 0x05, 0x09, 0x03, 0x0E, 0x0E, 0x0F, 0x09 };
    
    Digest32 ADProofsRoot = { 0x49, 0x45, 0x38, 0x75, 0xA4, 0x30, 0x35, 0xC7, 0x64, 0x0D, 0xEE, 0x2F, 0x90, 0x5E, 0xFE, 0x06, 0x12, 0x8B, 0x00, 0xD4, 0x1A, 0xCD, 0x2C, 0x8D, 0xF1, 0x36, 0x91, 0x57, 0x6D, 0x4F, 0xD8, 0x5C };

    ADDigest stateRoot = { 0xC0, 0xD0, 0xB5, 0xEA, 0xFD, 0x07, 0xB2, 0x24, 0x87, 0xDA, 0xC6, 0x66, 0x28, 0x66, 0x9C, 0x42, 0xA2, 0x42, 0xB9, 0x0B, 0xEF, 0x3E, 0x1F, 0xCD, 0xC7, 0x6D, 0x83, 0x14, 0x0D, 0x58, 0xB6, 0xBC, 0x0E };

    Digest32 transactionsRoot = { 0x77, 0x0C, 0xBB, 0x6E, 0x18, 0x67, 0x3E, 0xD0, 0x25, 0xD3, 0x86, 0x48, 0x7F, 0x15, 0xD3, 0x25, 0x21, 0x15, 0xD9, 0xA6, 0xF6, 0xC9, 0xB9, 0x47, 0xCF, 0x3D, 0x04, 0x73, 0x1D, 0xD6, 0xAB, 0x75 };
    
    uint64_t timestamp = 1611225263165;
    uint32_t nBits = 72286528;
    int height = 2870;
    Digest32 extensionRoot = { 0x9B, 0xC7, 0xD5, 0x45, 0x83, 0xC5, 0xD4, 0x4B, 0xB6, 0x2A, 0x7B, 0xE0, 0x47, 0x3C, 0xD7, 0x8D, 0x60, 0x18, 0x22, 0xA6, 0x26, 0xAF, 0xC1, 0x3B, 0x63, 0x6F, 0x2C, 0xBF, 0xF0, 0xD8, 0x7F, 0xAF };

    AutolykosSolution powSolution = {
      groupElemFromBytes({ 0x02, 0x88, 0x11, 0x4B, 0x05, 0x86, 0xEF, 0xEA, 0x9F, 0x86, 0xE4, 0x58, 0x7F, 0x20, 0x71, 0xBC, 0x1C, 0x85, 0xFB, 0x77, 0xE1, 0x5E, 0xBA, 0x96, 0xB2, 0x76, 0x97, 0x33, 0xE0, 0xDA, 0xF5, 0x79, 0x03 }),
      groupElemFromBytes({ 0x02, 0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B, 0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8, 0x17, 0x98 }),
      { 0x00, 0x01, 0x00, 0x00, 0x05, 0x80, 0xA9, 0x1B },
      boost::multiprecision::cpp_int("0")
    };
    std::array<uint8_t, 3> votes = {0x00, 0x00, 0x00};

    return Header(version, parentId, ADProofsRoot, stateRoot, transactionsRoot, timestamp, nBits, height, extensionRoot, powSolution, votes);
}

int main() {
    int k = 32;
    int n = 26; // Example values, adjust as needed
                
    // Create an instance of AutolykosPowScheme
    AutolykosPowScheme powScheme(k, n);

    powScheme.validate(createHeader());

    return 0;
}
